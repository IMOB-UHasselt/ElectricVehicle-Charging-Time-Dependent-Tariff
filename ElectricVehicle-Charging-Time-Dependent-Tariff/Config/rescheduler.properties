# $Id: rescheduler.properties 165 2012-04-11 22:36:18Z sboshort $
# -- ------------------------------------------------------------------------
# Specific subdirectory for the reScheduler 'widrs" project.
dataDir={f2:extData}widrs/

# Directory containing input data for 'widrs'
inputDataDir={rescheduler:dataDir}input/
# Directory containing data generated by 'widrs'
generatedDataDir={rescheduler:dataDir}generated/

# Directory where to write statistics results.
statisticsDir={rescheduler:generatedDataDir}StatisticsData/in/cdfPdfPlotter/

#Directory where statistical results should be output
statisticsOutDir={rescheduler:generatedDataDir}StatisticsData/out/

# The activity of longest duration in each MASWOIC reaches a given
# relative utility saturation level fUtil. This fUtil is used to determine the value of alpha for longest duration using following formula.
# alphaL  = (- Math.log(1 - fUtil))/dL;
# Refer to specification of determination of Alpha and K values
fUtil=0.95

# m constant is used to calculate the K values for each activity.
# K values, according to the latest specs, are duration dependent not activity
# type dependent. 
#
# kL = C / Math . pow (dL, m)
#
# C is calculated from the condition that the utility for the initial schedule
# equals 1.
m_constant=1

# -- ------------------------------------------------------------------------
# threshold [min] for trip duration change detected by experience in order to
# trigger reScheduling. All changes are processed but large changes only can
# trigger reScheduling while traveling. ReScheduling is triggered anyway at
# trip completion time.
# Trip duration change is caused by additional congestion due to an incident,
# hence  additional delay with respect to the reference impedance value.
# Trip duration differece for each trip separately is compared to this threshold.
minCongestionDelayToTriggerReschedulingWhileOnTheRoad=1


# -- ------------------------------------------------------------------------
# Maximal relative 2-norm error used while calculating reference
# impedance matrices.
# The impedance matrix is considered to be a vector in nDim^2 space (where
# nDim is the matrix dimension). The 2-norm is the euclidian length of the
# vector.
# Reference impedance matrices are calculated iteratively (which costs a lot
# of time) by (in a loop)
#  - calculating OD_flow from the schedules (episodes list)
#  - applying OD_flow to the network (= assigning traffic)
#  - calculating travel times (impedance matrix)
#  - adjusting travel times in the schedules (including adjustment of activity
#    times which implies rescheduling by (de)compression)
#  - calculating the 2-norm of the impedance matrix
# Using fresh (non-adjusted) impedance matrices, one iteration takes about
# 96*10[min]=16[hours] (for the 2500 TAZ case) hence do not require a very
# small relative error.
# The relative error is calculated with the average length as a reference:
# REL_ERR = ABS(NEW_VAL - OLD_VAL)/((NEW_VAL + OLD_VAL)/2)
maxRelDiffOnImpedMtxNorm=0.05
#
# -- ------------------------------------------------------------------------
# Use "skipRefImpedMtxAdjustment" to skip the very expensive iteration to 
# mutually adjust impedance matrices and schedules (and hence allow for an
# error in the reference impedance matrices.
skipRefImpedMtxAdjustment=false
# -- ------------------------------------------------------------------------
# -- Number of cores to use.
# -- Parts of WIDRS can be executed by multiple simultaneous threads.
# -- If maxCoresToUse is strictly positive, WIDRS will not use more than the 
# -- specified number.
# -- If maxCoresToUse is not strictly positive, its abssolute value specifies
# -- the number of of cores NOT to use (i.e. to leave available for other
# -- operations).
maxCoresToUse=-1
# -- ------------------------------------------------------------------------
# -- Schedules predicted by Feathers need to be adjusted to comply with the
# -- impedance matrices they generate (for each NSE_period).
# -- This process adapts schedules and OD-flows in a loop. Travel times
# -- (impedance matrices) are calculated from the OD-Flows.
# -- The resulting set of schedules shall reproduce the OD-flows generated by
# -- Feathers as good as possible since those have been validated (at hourly
# -- basis) with traffic counts. This results in one DOF (degree of freedom)
# -- for each schedule. The method to calculate the value for the DOFs has
# -- been described in the javadoc for ReschedulerService.calcScheduleStartTimeDOF().
# -- The k-value specified here is used in the weight functions.
# -- Requirement : k >= 1
# -- When k goes to infinite, all weights become equal.
k_scheduleAdaptation_DOF=1

# -- ------------------------------------------------------------------------
# -- Threshold [min] for total absolute activity duration adjustment
# -- during relaxation.
totalAbsolScheduleAdjThreshold=0.1

# -- ------------------------------------------------------------------------
# -- Expected value [min] for gamma distributed incident notification delay.
# -- For each person and each incident, a delay D is sampled from the gamma
# -- distribution. The person is notified about the incident at time T+D
# -- where T denotes the incident occurrence time.
# -- The minimal value is 1[min].
expIncidNotifDelay=30
