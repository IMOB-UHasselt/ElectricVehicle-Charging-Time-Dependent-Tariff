package be.uhasselt.imob.feathers2.core;

import be.uhasselt.imob.feathers2.core.network.INetworkPerceptionFilter;
import java.util.List;

/**
   IAgent models the actor that is the primary activity executor and transport participant. 
   <ol>
      <li>IAgent models a <em>solitudinarian</em> or <em>loner</em> (in contrast to {@link be.uhasselt.imob.feathers2.core.ISocialAgent}).</li>
      <li>Agent identifiers are assumed to be integer numbers in the range <code>[0 .. N-1]</code> where N is the cardinality of the set of all agents. This is not a restriction on generality since agents are generated by stochastic procedures. On the other hand, this assumption is interesting for efficiency reasons.</li>
   </ol>

   @author IMOB/lk
   @version $Id: IAgent.java 125 2011-06-03 14:11:58Z LukKnapen $
*/
public interface IAgent
{
   /** Get agent identifier. */
   int id();

   /** Get the static agent (actor) data.
   @postcond. <code>returnValue != null</code>
   @return set of data that do not change during simulation runs
   */
   IAgentStaticData staticData();

   /** Get the actual agent schedule.
   @return null iff none available
   */
   ISchedule schedule();

   /** Filter that defines how the network is perceived by the agent.
   <ol>
      <li>A reference to a perception filter is supplied instead of directly a reference to a {@link be.uhasselt.imob.feathers2.core.network.INetwork} because it is assumed that information about the actually installed filter can be useful.</li>
      <li></li>
   </ol>
    */
   INetworkPerceptionFilter networkPerceptionFilter();

   /** Details about the jobs executed by the agent.
   <ol>
      <li>If the agent has a work episode, it needs at least one job descriptor.</li>
      <li>If the agent has multiple work episodes, consecutive job descriptors are assigned to consecutive work episodes; in case of shortage of jobDescriptors, the last one in teh list, is assigned to all remaining work episodes. Due to this assignement method, a <code>List</code> is returned instead of a Collection : we need an ordered structure.</li>
   </ol>
   */
   List<IJobDescriptor> jobDescriptors();
}

